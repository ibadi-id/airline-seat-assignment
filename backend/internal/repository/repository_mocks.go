// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"github.com/ibadi-id/airline-seat-assignment/backend/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockVoucherRepository creates a new instance of MockVoucherRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVoucherRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVoucherRepository {
	mock := &MockVoucherRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVoucherRepository is an autogenerated mock type for the VoucherRepository type
type MockVoucherRepository struct {
	mock.Mock
}

type MockVoucherRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVoucherRepository) EXPECT() *MockVoucherRepository_Expecter {
	return &MockVoucherRepository_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function for the type MockVoucherRepository
func (_mock *MockVoucherRepository) Exists(flightNumber string, date string) (bool, error) {
	ret := _mock.Called(flightNumber, date)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return returnFunc(flightNumber, date)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(flightNumber, date)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(flightNumber, date)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVoucherRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockVoucherRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - flightNumber string
//   - date string
func (_e *MockVoucherRepository_Expecter) Exists(flightNumber interface{}, date interface{}) *MockVoucherRepository_Exists_Call {
	return &MockVoucherRepository_Exists_Call{Call: _e.mock.On("Exists", flightNumber, date)}
}

func (_c *MockVoucherRepository_Exists_Call) Run(run func(flightNumber string, date string)) *MockVoucherRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVoucherRepository_Exists_Call) Return(b bool, err error) *MockVoucherRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockVoucherRepository_Exists_Call) RunAndReturn(run func(flightNumber string, date string) (bool, error)) *MockVoucherRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockVoucherRepository
func (_mock *MockVoucherRepository) Save(v domain.Voucher) error {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.Voucher) error); ok {
		r0 = returnFunc(v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVoucherRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockVoucherRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - v domain.Voucher
func (_e *MockVoucherRepository_Expecter) Save(v interface{}) *MockVoucherRepository_Save_Call {
	return &MockVoucherRepository_Save_Call{Call: _e.mock.On("Save", v)}
}

func (_c *MockVoucherRepository_Save_Call) Run(run func(v domain.Voucher)) *MockVoucherRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Voucher
		if args[0] != nil {
			arg0 = args[0].(domain.Voucher)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVoucherRepository_Save_Call) Return(err error) *MockVoucherRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVoucherRepository_Save_Call) RunAndReturn(run func(v domain.Voucher) error) *MockVoucherRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
