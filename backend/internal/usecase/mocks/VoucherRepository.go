// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/ibadi-id/airline-seat-assignment/backend/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// VoucherRepository is an autogenerated mock type for the VoucherRepository type
type VoucherRepository struct {
	mock.Mock
}

// Exists provides a mock function with given fields: flightNumber, date
func (_m *VoucherRepository) Exists(flightNumber string, date string) (bool, error) {
	ret := _m.Called(flightNumber, date)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(flightNumber, date)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(flightNumber, date)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(flightNumber, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: v
func (_m *VoucherRepository) Save(v domain.Voucher) error {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Voucher) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVoucherRepository creates a new instance of VoucherRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVoucherRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VoucherRepository {
	mock := &VoucherRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
